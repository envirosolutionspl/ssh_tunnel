# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SshTunnel
                                 A QGIS plugin
 QGIS Plugin to establish a secure connection via SSH tunnel for such purposes like database connection.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-06
        copyright            : (C) 2020 by Michał Włoga - EnviroSolutions Sp. z o.o.
        email                : office@envirosolutions.pl
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QSize
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt.QtWidgets import QAction, QToolBar, QMessageBox
from ssh_tunnel import TunnelForwarder
from PyQt5.QtWidgets import QFileDialog
from qgis.core import QgsVectorLayer, QgsDataSourceUri, QgsProject, QgsSettings, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ssh_tunnel_dialog import SshTunnelDialog
import os.path
from time import sleep

"""Wersja wtyczki"""
plugin_version = '1.0.0'
plugin_name = 'QGIS SSH Tunnel'

class SshTunnelQgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SshTunnelQgis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&EnviroSolutions')

        #toolbar
        self.toolbar = self.iface.mainWindow().findChild(QToolBar, 'EnviroSolutions')
        if not self.toolbar:
            self.toolbar = self.iface.addToolBar(u'EnviroSolutions')
            self.toolbar.setObjectName(u'EnviroSolutions')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.keyPath = None
        self.isConnected = False
        self.server = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SshTunnelQgis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            #self.iface.addToolBarIcon(action)
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # toggle connection action
        self.toolbar.addSeparator()
        self.add_action(
            ':/plugins/ssh_tunnel/images/icon_inactive.png',
            text=self.tr(plugin_name + ' - disconnected, configure connection details to connect'),
            callback=self.toggleConnection,
            parent=self.iface.mainWindow(),
            enabled_flag=False,
            status_tip=self.tr('Configure connection details to connect')
        )

        # settings action
        self.add_action(
            ':/plugins/ssh_tunnel/images/settings.svg',
            text=self.tr(plugin_name + ' - settings'),
            callback=self.run,
            parent=self.iface.mainWindow()
        )
        self.toolbar.addSeparator()
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&EnviroSolutions'),
                action)
            # self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SshTunnelDialog()
            # Events
            self.dlg.rbn_pass.toggled.connect(self.radioButton_toggled)
            self.dlg.rbn_key.toggled.connect(self.radioButton_toggled)
            self.dlg.rbn_keypass.toggled.connect(self.radioButton_toggled)
            self.dlg.sbx_lport.valueChanged.connect(self.sbx_lport_valueChanged)
            self.dlg.btn_key.clicked.connect(self.btn_key_clicked)
            self.dlg.btn_test.clicked.connect(self.btn_test_clicked)
            self.dlg.btn_ok.clicked.connect(self.btn_ok_clicked)
            self.dlg.btn_cancel.clicked.connect(self.btn_cancel_clicked)

            # Inicjacja grafik
            self.dlg.img_main.setPixmap(QPixmap(':/plugins/ssh_tunnel/images/icon_uug.png'))

            # rozmiar okna
            self.dlg.setFixedSize(self.dlg.size())

            # informacje o wersji
            self.dlg.setWindowTitle('%s %s' % (plugin_name, plugin_version))
            self.dlg.lbl_pluginVersion.setText('%s %s' % (plugin_name, plugin_version))

            self.readSettings()

        # show the dialog
        self.dlg.show()
        self.lport = self.dlg.sbx_lport.value()

    def toggleConnection(self):
        action = self.toolbar.sender()
        if self.isConnected:
            self.disconnect()
            action.setIcon(QIcon(':/plugins/ssh_tunnel/images/icon_inactive.png'))
            action.setText(self.tr(plugin_name + ' - disconnected'))
            action.setStatusTip(self.tr('Click to connect'))
            self.iface.messageBar().pushMessage("Info:",
                                                "SSH tunnel has been disconnected",
                                                level=Qgis.Info,
                                                duration=10)
        else:
            try:
                self.connect()
                self.iface.messageBar().pushMessage("Success:",
                                                    "connection to %s:%d estabilished. Binded remote port %d to local %d" % (
                                                        self.dlg.led_server.text(),
                                                        self.dlg.sbx_sshport.value(),
                                                        self.dlg.sbx_rport.value(),
                                                        self.dlg.sbx_lport.value()
                                                    ),
                                                    level=Qgis.Success,
                                                    duration=30)
                action.setIcon(QIcon(':/plugins/ssh_tunnel/images/icon_active.png'))
                action.setText(self.tr(plugin_name + ' - connected, binded port:') + ' %s' % self.lport)
                action.setStatusTip(self.tr('Click to disconnect'))

            except Exception as e:
                self.showMessageBox(str(e))




    def radioButton_toggled(self, checked):
        if not checked:
            return
        if self.dlg.rbn_pass.isChecked():
            self.dlg.lbl_pass.setEnabled(True)
            self.dlg.lbl_pass.setText("SSH Password")
            self.dlg.led_pass.setEnabled(True)
            self.dlg.gbx_key.setEnabled(False)

        if self.dlg.rbn_key.isChecked():
            self.dlg.lbl_pass.setEnabled(False)
            self.dlg.led_pass.setEnabled(False)
            self.dlg.gbx_key.setEnabled(True)

        if self.dlg.rbn_keypass.isChecked():
            self.dlg.lbl_pass.setEnabled(True)
            self.dlg.lbl_pass.setText("Private Key Password")
            self.dlg.led_pass.setEnabled(True)
            self.dlg.gbx_key.setEnabled(True)

    def btn_key_clicked(self):
        button = self.dlg.sender()
        self.keyPath = QFileDialog.getOpenFileName()[0]
        self.keyPath = None if self.keyPath == '' else self.keyPath
        if self.keyPath:
            button.setIcon(QIcon(':/plugins/ssh_tunnel/images/ok.svg'))
        # button.setIconSize(QSize(65, 65))

    def btn_test_clicked(self):
        validationResult = self.validateForm()
        if validationResult[0]:
            try:
                self.connect()
                self.showMessageBox('Connection succeeded', QMessageBox.Information)
            except Exception as e:
                self.showMessageBox(str(e))
            finally:
                self.disconnect()
        else:
            self.showMessageBox(validationResult[1])
    def btn_ok_clicked(self):
        self.storeSettings()
        validationResult = self.validateForm()
        if validationResult[0]:
            self.actions[0].setEnabled(True)
            self.actions[0].setText(self.tr(plugin_name + ' - disconnected'))
            self.actions[0].setStatusTip(self.tr('Click to connect'))
            self.dlg.hide()
        else:
            self.showMessageBox(validationResult[1])


    def btn_cancel_clicked(self):
        self.dlg.hide()

    def sbx_lport_valueChanged(self):
        self.lport = self.dlg.sbx_lport.value()
        self.dlg.lbl_summary.setText("<FONT COLOR='#AA0000'>Your remote data will be available on 127.0.0.1:%d</FONT>" % self.lport)

    def validateForm(self):
        if self.dlg.led_server.text() == '':
            return False, 'Type ssh host address'
        if self.dlg.led_user.text() == '':
            return False, 'Type ssh username'
        if (self.dlg.rbn_pass.isChecked() or self.dlg.rbn_keypass.isChecked()) and self.dlg.led_pass.text() == '':
            return False, 'Type ssh password'
        if (self.dlg.rbn_key.isChecked() or self.dlg.rbn_keypass.isChecked()) and not self.keyPath:
            return False, 'Choose a Private Key file'
        return True, 'OK'

    def connect(self):
        host = self.dlg.led_server.text()#str
        sshport = self.dlg.sbx_sshport.value()#int
        uname = self.dlg.led_user.text()#str
        upass = self.dlg.led_pass.text()#str
        lport = self.dlg.sbx_lport.value()#int
        rport = self.dlg.sbx_rport.value()#int


        if self.dlg.rbn_pass.isChecked():
            self.server = TunnelForwarder(
                (host, sshport),
                ssh_username=uname,
                ssh_password=upass,
                remote_bind_address=('127.0.0.1', rport),
                local_bind_address=('127.0.0.1', lport)
            )
        if self.dlg.rbn_key.isChecked():
            self.server = TunnelForwarder(
                (host, sshport),
                ssh_username=uname,
                ssh_pkey=self.keyPath,
                remote_bind_address=('127.0.0.1', rport),
                local_bind_address=('127.0.0.1', lport)
            )
        if self.dlg.rbn_keypass.isChecked():
            self.server = TunnelForwarder(
                (host, sshport),
                ssh_username=uname,
                ssh_pkey=self.keyPath,
                ssh_private_key_password=upass,
                remote_bind_address=('127.0.0.1', rport),
                local_bind_address=('127.0.0.1', lport)
            )
        self.server.start()
        self.isConnected = True
        print(self.server)

    def disconnect(self):
        print("a")
        print(self.server.tunnel_is_up)
        print(self.server.is_active)
        if self.server.tunnel_is_up:
            self.server.stop()
            print("b")
        self.isConnected = False
        print("c")
        print(self.server.is_active)

    def storeSettings(self):
        s = QgsSettings()
        s.setValue("ssh_tunnel/host", self.dlg.led_server.text())
        s.setValue("ssh_tunnel/sshport", self.dlg.sbx_sshport.value())
        s.setValue("ssh_tunnel/uname", self.dlg.led_user.text())
        s.setValue("ssh_tunnel/lport", self.dlg.sbx_lport.value())
        s.setValue("ssh_tunnel/rport", self.dlg.sbx_rport.value())

    def readSettings(self):
        s = QgsSettings()
        self.dlg.led_server.setText(s.value("ssh_tunnel/host", ''))
        self.dlg.sbx_sshport.setValue(int(s.value("ssh_tunnel/sshport", 22)))
        self.dlg.led_user.setText(s.value("ssh_tunnel/uname", ''))
        self.dlg.sbx_lport.setValue(int(s.value("ssh_tunnel/lport", 55667)))
        self.dlg.sbx_rport.setValue(int(s.value("ssh_tunnel/rport", 5432)))

    def showMessageBox(self, message, level=QMessageBox.Warning):
        msgBox = QMessageBox()
        msgBox.setText(message)
        msgBox.setWindowTitle(plugin_name)
        msgBox.setIcon(level)
        msgBox.exec()